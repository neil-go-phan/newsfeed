// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	services "server/services"

	mock "github.com/stretchr/testify/mock"
)

// FollowServices is an autogenerated mock type for the FollowServices type
type FollowServices struct {
	mock.Mock
}

// Follow provides a mock function with given fields: username, articlesSourceID
func (_m *FollowServices) Follow(username string, articlesSourceID uint) error {
	ret := _m.Called(username, articlesSourceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(username, articlesSourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNewestSourceUpdatedID provides a mock function with given fields: username
func (_m *FollowServices) GetNewestSourceUpdatedID(username string) ([]uint, error) {
	ret := _m.Called(username)

	var r0 []uint
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]uint, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) []uint); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserFollowedSources provides a mock function with given fields: username
func (_m *FollowServices) GetUserFollowedSources(username string) ([]services.ArticlesSourceUserFollow, error) {
	ret := _m.Called(username)

	var r0 []services.ArticlesSourceUserFollow
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]services.ArticlesSourceUserFollow, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) []services.ArticlesSourceUserFollow); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.ArticlesSourceUserFollow)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unfollow provides a mock function with given fields: username, articlesSourceID
func (_m *FollowServices) Unfollow(username string, articlesSourceID uint) error {
	ret := _m.Called(username, articlesSourceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(username, articlesSourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFollowServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewFollowServices creates a new instance of FollowServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFollowServices(t mockConstructorTestingTNewFollowServices) *FollowServices {
	mock := &FollowServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
