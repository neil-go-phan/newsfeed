// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ReadServices is an autogenerated mock type for the ReadServices type
type ReadServices struct {
	mock.Mock
}

// MarkAllAsReadBySourceID provides a mock function with given fields: username, articlesSourceID
func (_m *ReadServices) MarkAllAsReadBySourceID(username string, articlesSourceID uint) error {
	ret := _m.Called(username, articlesSourceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(username, articlesSourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkAllAsReadByUserFollowedSource provides a mock function with given fields: username
func (_m *ReadServices) MarkAllAsReadByUserFollowedSource(username string) error {
	ret := _m.Called(username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkArticleAsRead provides a mock function with given fields: username, articleID, articlesSourceID
func (_m *ReadServices) MarkArticleAsRead(username string, articleID uint, articlesSourceID uint) error {
	ret := _m.Called(username, articleID, articlesSourceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint, uint) error); ok {
		r0 = rf(username, articleID, articlesSourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkArticleAsUnRead provides a mock function with given fields: username, articleID, articlesSourceID
func (_m *ReadServices) MarkArticleAsUnRead(username string, articleID uint, articlesSourceID uint) error {
	ret := _m.Called(username, articleID, articlesSourceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint, uint) error); ok {
		r0 = rf(username, articleID, articlesSourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewReadServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewReadServices creates a new instance of ReadServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReadServices(t mockConstructorTestingTNewReadServices) *ReadServices {
	mock := &ReadServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
