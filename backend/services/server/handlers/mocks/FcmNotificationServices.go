// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"

	messaging "firebase.google.com/go/messaging"
	mock "github.com/stretchr/testify/mock"
)

// FcmNotificationServices is an autogenerated mock type for the FcmNotificationServices type
type FcmNotificationServices struct {
	mock.Mock
}

// Create provides a mock function with given fields: fcmNotification
func (_m *FcmNotificationServices) Create(fcmNotification entities.FcmNotification) error {
	ret := _m.Called(fcmNotification)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.FcmNotification) error); ok {
		r0 = rf(fcmNotification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CronjobPushNotification provides a mock function with given fields:
func (_m *FcmNotificationServices) CronjobPushNotification() {
	_m.Called()
}

// List provides a mock function with given fields:
func (_m *FcmNotificationServices) List() ([]entities.FcmNotification, error) {
	ret := _m.Called()

	var r0 []entities.FcmNotification
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.FcmNotification, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.FcmNotification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.FcmNotification)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendArticleToAll provides a mock function with given fields:
func (_m *FcmNotificationServices) SendArticleToAll() {
	_m.Called()
}

// SendMessages provides a mock function with given fields: message
func (_m *FcmNotificationServices) SendMessages(message *messaging.MulticastMessage) {
	_m.Called(message)
}

// SendNoti provides a mock function with given fields: message
func (_m *FcmNotificationServices) SendNoti(message entities.NotificationMessage) {
	_m.Called(message)
}

type mockConstructorTestingTNewFcmNotificationServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewFcmNotificationServices creates a new instance of FcmNotificationServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFcmNotificationServices(t mockConstructorTestingTNewFcmNotificationServices) *FcmNotificationServices {
	mock := &FcmNotificationServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
