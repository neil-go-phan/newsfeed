// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"
	services "server/services"

	mock "github.com/stretchr/testify/mock"
)

// CronjobServices is an autogenerated mock type for the CronjobServices type
type CronjobServices struct {
	mock.Mock
}

// CreateCrawlerCronjob provides a mock function with given fields: crawler
func (_m *CronjobServices) CreateCrawlerCronjob(crawler entities.Crawler) {
	_m.Called(crawler)
}

// CronjobOnDay provides a mock function with given fields: timeString
func (_m *CronjobServices) CronjobOnDay(timeString string) (*[24]services.ChartDay, error) {
	ret := _m.Called(timeString)

	var r0 *[24]services.ChartDay
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[24]services.ChartDay, error)); ok {
		return rf(timeString)
	}
	if rf, ok := ret.Get(0).(func(string) *[24]services.ChartDay); ok {
		r0 = rf(timeString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[24]services.ChartDay)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(timeString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CronjobOnHour provides a mock function with given fields: timeString
func (_m *CronjobServices) CronjobOnHour(timeString string) (*[60]services.ChartHour, error) {
	ret := _m.Called(timeString)

	var r0 *[60]services.ChartHour
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[60]services.ChartHour, error)); ok {
		return rf(timeString)
	}
	if rf, ok := ret.Get(0).(func(string) *[60]services.ChartHour); ok {
		r0 = rf(timeString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[60]services.ChartHour)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(timeString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCronjobRuntime provides a mock function with given fields:
func (_m *CronjobServices) GetCronjobRuntime() []services.CronjobResponse {
	ret := _m.Called()

	var r0 []services.CronjobResponse
	if rf, ok := ret.Get(0).(func() []services.CronjobResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.CronjobResponse)
		}
	}

	return r0
}

// RemoveCronjob provides a mock function with given fields: crawler
func (_m *CronjobServices) RemoveCronjob(crawler entities.Crawler) error {
	ret := _m.Called(crawler)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Crawler) error); ok {
		r0 = rf(crawler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCronjobServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewCronjobServices creates a new instance of CronjobServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCronjobServices(t mockConstructorTestingTNewCronjobServices) *CronjobServices {
	mock := &CronjobServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
