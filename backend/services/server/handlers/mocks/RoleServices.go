// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	services "server/services"

	mock "github.com/stretchr/testify/mock"
)

// RoleServices is an autogenerated mock type for the RoleServices type
type RoleServices struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *RoleServices) Count() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: rolePayload
func (_m *RoleServices) Create(rolePayload services.RoleResponse) error {
	ret := _m.Called(rolePayload)

	var r0 error
	if rf, ok := ret.Get(0).(func(services.RoleResponse) error); ok {
		r0 = rf(rolePayload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *RoleServices) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: roleName
func (_m *RoleServices) Get(roleName string) (services.RoleResponse, error) {
	ret := _m.Called(roleName)

	var r0 services.RoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (services.RoleResponse, error)); ok {
		return rf(roleName)
	}
	if rf, ok := ret.Get(0).(func(string) services.RoleResponse); ok {
		r0 = rf(roleName)
	} else {
		r0 = ret.Get(0).(services.RoleResponse)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantPermission provides a mock function with given fields: userRole, entity, method
func (_m *RoleServices) GrantPermission(userRole string, entity string, method string) bool {
	ret := _m.Called(userRole, entity, method)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(userRole, entity, method)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// List provides a mock function with given fields: page, pageSize
func (_m *RoleServices) List(page int, pageSize int) ([]services.RoleResponse, error) {
	ret := _m.Called(page, pageSize)

	var r0 []services.RoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]services.RoleResponse, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []services.RoleResponse); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.RoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoleName provides a mock function with given fields:
func (_m *RoleServices) ListRoleName() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: rolePayload
func (_m *RoleServices) Update(rolePayload services.RoleResponse) error {
	ret := _m.Called(rolePayload)

	var r0 error
	if rf, ok := ret.Get(0).(func(services.RoleResponse) error); ok {
		r0 = rf(rolePayload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validate provides a mock function with given fields: roleName
func (_m *RoleServices) Validate(roleName string) error {
	ret := _m.Called(roleName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRoleServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoleServices creates a new instance of RoleServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoleServices(t mockConstructorTestingTNewRoleServices) *RoleServices {
	mock := &RoleServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
