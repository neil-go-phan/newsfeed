// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// FollowRepository is an autogenerated mock type for the FollowRepository type
type FollowRepository struct {
	mock.Mock
}

// CreateIfNotExist provides a mock function with given fields: follow
func (_m *FollowRepository) CreateIfNotExist(follow entities.Follow) error {
	ret := _m.Called(follow)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Follow) error); ok {
		r0 = rf(follow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: follow
func (_m *FollowRepository) Delete(follow entities.Follow) error {
	ret := _m.Called(follow)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Follow) error); ok {
		r0 = rf(follow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUsername provides a mock function with given fields: username
func (_m *FollowRepository) GetByUsername(username string) ([]entities.Follow, error) {
	ret := _m.Called(username)

	var r0 []entities.Follow
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entities.Follow, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) []entities.Follow); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Follow)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewestFeedsUpdated provides a mock function with given fields: username
func (_m *FollowRepository) GetNewestFeedsUpdated(username string) ([]entities.Follow, error) {
	ret := _m.Called(username)

	var r0 []entities.Follow
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entities.Follow, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) []entities.Follow); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Follow)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFollowRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewFollowRepository creates a new instance of FollowRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFollowRepository(t mockConstructorTestingTNewFollowRepository) *FollowRepository {
	mock := &FollowRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
