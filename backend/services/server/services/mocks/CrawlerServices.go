// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"
	services "server/services"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// CrawlerServices is an autogenerated mock type for the CrawlerServices type
type CrawlerServices struct {
	mock.Mock
}

// CreateCrawlerCronjobFromDB provides a mock function with given fields:
func (_m *CrawlerServices) CreateCrawlerCronjobFromDB() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCrawlerWithCorrespondingArticlesSource provides a mock function with given fields: role, payload
func (_m *CrawlerServices) CreateCrawlerWithCorrespondingArticlesSource(role string, payload services.CreateCrawlerPayload) error {
	ret := _m.Called(role, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, services.CreateCrawlerPayload) error); ok {
		r0 = rf(role, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CronjobOnDay provides a mock function with given fields: timeString
func (_m *CrawlerServices) CronjobOnDay(timeString string) (*[24]services.ChartDay, error) {
	ret := _m.Called(timeString)

	var r0 *[24]services.ChartDay
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[24]services.ChartDay, error)); ok {
		return rf(timeString)
	}
	if rf, ok := ret.Get(0).(func(string) *[24]services.ChartDay); ok {
		r0 = rf(timeString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[24]services.ChartDay)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(timeString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CronjobOnHour provides a mock function with given fields: timeString
func (_m *CrawlerServices) CronjobOnHour(timeString string) (*[60]services.ChartHour, error) {
	ret := _m.Called(timeString)

	var r0 *[60]services.ChartHour
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[60]services.ChartHour, error)); ok {
		return rf(timeString)
	}
	if rf, ok := ret.Get(0).(func(string) *[60]services.ChartHour); ok {
		r0 = rf(timeString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[60]services.ChartHour)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(timeString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *CrawlerServices) Get(id uint) (*entities.Crawler, error) {
	ret := _m.Called(id)

	var r0 *entities.Crawler
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entities.Crawler, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *entities.Crawler); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Crawler)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHtmlPage provides a mock function with given fields: _a0
func (_m *CrawlerServices) GetHtmlPage(_a0 *url.URL) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*url.URL) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAllPaging provides a mock function with given fields: page, pageSize
func (_m *CrawlerServices) ListAllPaging(page int, pageSize int) ([]services.CrawlerResponse, int64, error) {
	ret := _m.Called(page, pageSize)

	var r0 []services.CrawlerResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]services.CrawlerResponse, int64, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []services.CrawlerResponse); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.CrawlerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TestCustomCrawler provides a mock function with given fields: crawler
func (_m *CrawlerServices) TestCustomCrawler(crawler entities.Crawler) (*services.ArticlesSourceResponseCrawl, []*services.ArticleResponse, error) {
	ret := _m.Called(crawler)

	var r0 *services.ArticlesSourceResponseCrawl
	var r1 []*services.ArticleResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(entities.Crawler) (*services.ArticlesSourceResponseCrawl, []*services.ArticleResponse, error)); ok {
		return rf(crawler)
	}
	if rf, ok := ret.Get(0).(func(entities.Crawler) *services.ArticlesSourceResponseCrawl); ok {
		r0 = rf(crawler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.ArticlesSourceResponseCrawl)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.Crawler) []*services.ArticleResponse); ok {
		r1 = rf(crawler)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*services.ArticleResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(entities.Crawler) error); ok {
		r2 = rf(crawler)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TestRSSCrawler provides a mock function with given fields: crawler
func (_m *CrawlerServices) TestRSSCrawler(crawler entities.Crawler) (*services.ArticlesSourceResponseCrawl, []*services.ArticleResponse, error) {
	ret := _m.Called(crawler)

	var r0 *services.ArticlesSourceResponseCrawl
	var r1 []*services.ArticleResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(entities.Crawler) (*services.ArticlesSourceResponseCrawl, []*services.ArticleResponse, error)); ok {
		return rf(crawler)
	}
	if rf, ok := ret.Get(0).(func(entities.Crawler) *services.ArticlesSourceResponseCrawl); ok {
		r0 = rf(crawler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.ArticlesSourceResponseCrawl)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.Crawler) []*services.ArticleResponse); ok {
		r1 = rf(crawler)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*services.ArticleResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(entities.Crawler) error); ok {
		r2 = rf(crawler)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: role, crawler
func (_m *CrawlerServices) Update(role string, crawler entities.Crawler) error {
	ret := _m.Called(role, crawler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entities.Crawler) error); ok {
		r0 = rf(role, crawler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSchedule provides a mock function with given fields: role, id, newSchedule
func (_m *CrawlerServices) UpdateSchedule(role string, id uint, newSchedule string) error {
	ret := _m.Called(role, id, newSchedule)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint, string) error); ok {
		r0 = rf(role, id, newSchedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCrawlerServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewCrawlerServices creates a new instance of CrawlerServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCrawlerServices(t mockConstructorTestingTNewCrawlerServices) *CrawlerServices {
	mock := &CrawlerServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
