// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ReadRepository is an autogenerated mock type for the ReadRepository type
type ReadRepository struct {
	mock.Mock
}

// CountByUsernameAndSourceID provides a mock function with given fields: read
func (_m *ReadRepository) CountByUsernameAndSourceID(read entities.Read) (int64, error) {
	ret := _m.Called(read)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Read) (int64, error)); ok {
		return rf(read)
	}
	if rf, ok := ret.Get(0).(func(entities.Read) int64); ok {
		r0 = rf(read)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(entities.Read) error); ok {
		r1 = rf(read)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: read
func (_m *ReadRepository) Create(read entities.Read) error {
	ret := _m.Called(read)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Read) error); ok {
		r0 = rf(read)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: read
func (_m *ReadRepository) Delete(read entities.Read) error {
	ret := _m.Called(read)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Read) error); ok {
		r0 = rf(read)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkAllAsReadBySourceID provides a mock function with given fields: username, articlesSourceID
func (_m *ReadRepository) MarkAllAsReadBySourceID(username string, articlesSourceID uint) error {
	ret := _m.Called(username, articlesSourceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(username, articlesSourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkAllAsReadByUserFollowedSource provides a mock function with given fields: username
func (_m *ReadRepository) MarkAllAsReadByUserFollowedSource(username string) error {
	ret := _m.Called(username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectByUsernameAndSourceIDOnDay provides a mock function with given fields: username, articlesSourceID, day
func (_m *ReadRepository) SelectByUsernameAndSourceIDOnDay(username string, articlesSourceID uint, day time.Time) ([]entities.Read, error) {
	ret := _m.Called(username, articlesSourceID, day)

	var r0 []entities.Read
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint, time.Time) ([]entities.Read, error)); ok {
		return rf(username, articlesSourceID, day)
	}
	if rf, ok := ret.Get(0).(func(string, uint, time.Time) []entities.Read); ok {
		r0 = rf(username, articlesSourceID, day)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Read)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint, time.Time) error); ok {
		r1 = rf(username, articlesSourceID, day)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByUsernameOnDay provides a mock function with given fields: username, day
func (_m *ReadRepository) SelectByUsernameOnDay(username string, day time.Time) ([]entities.Read, error) {
	ret := _m.Called(username, day)

	var r0 []entities.Read
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time) ([]entities.Read, error)); ok {
		return rf(username, day)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time) []entities.Read); ok {
		r0 = rf(username, day)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Read)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = rf(username, day)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReadRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewReadRepository creates a new instance of ReadRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReadRepository(t mockConstructorTestingTNewReadRepository) *ReadRepository {
	mock := &ReadRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
