// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"
	repository "server/repository"

	mock "github.com/stretchr/testify/mock"
)

// ArticlesSourcesRepository is an autogenerated mock type for the ArticlesSourcesRepository type
type ArticlesSourcesRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *ArticlesSourcesRepository) Count() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIfNotExist provides a mock function with given fields: articlesSource
func (_m *ArticlesSourcesRepository) CreateIfNotExist(articlesSource entities.ArticlesSource) (entities.ArticlesSource, error) {
	ret := _m.Called(articlesSource)

	var r0 entities.ArticlesSource
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ArticlesSource) (entities.ArticlesSource, error)); ok {
		return rf(articlesSource)
	}
	if rf, ok := ret.Get(0).(func(entities.ArticlesSource) entities.ArticlesSource); ok {
		r0 = rf(articlesSource)
	} else {
		r0 = ret.Get(0).(entities.ArticlesSource)
	}

	if rf, ok := ret.Get(1).(func(entities.ArticlesSource) error); ok {
		r1 = rf(articlesSource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecreaseFollowByOne provides a mock function with given fields: articlesSource
func (_m *ArticlesSourcesRepository) DecreaseFollowByOne(articlesSource entities.ArticlesSource) error {
	ret := _m.Called(articlesSource)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ArticlesSource) error); ok {
		r0 = rf(articlesSource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: source
func (_m *ArticlesSourcesRepository) Delete(source entities.ArticlesSource) error {
	ret := _m.Called(source)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ArticlesSource) error); ok {
		r0 = rf(source)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMostActiveSources provides a mock function with given fields:
func (_m *ArticlesSourcesRepository) GetMostActiveSources() ([]repository.MostActiveSource, error) {
	ret := _m.Called()

	var r0 []repository.MostActiveSource
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]repository.MostActiveSource, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []repository.MostActiveSource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.MostActiveSource)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithID provides a mock function with given fields: id
func (_m *ArticlesSourcesRepository) GetWithID(id uint) (entities.ArticlesSource, error) {
	ret := _m.Called(id)

	var r0 entities.ArticlesSource
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entities.ArticlesSource, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entities.ArticlesSource); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.ArticlesSource)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithTopicPaginate provides a mock function with given fields: topicID, page, pageSize
func (_m *ArticlesSourcesRepository) GetWithTopicPaginate(topicID uint, page int, pageSize int) ([]entities.ArticlesSource, int64, error) {
	ret := _m.Called(topicID, page, pageSize)

	var r0 []entities.ArticlesSource
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]entities.ArticlesSource, int64, error)); ok {
		return rf(topicID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []entities.ArticlesSource); ok {
		r0 = rf(topicID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ArticlesSource)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) int64); ok {
		r1 = rf(topicID, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint, int, int) error); ok {
		r2 = rf(topicID, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IncreaseFollowByOne provides a mock function with given fields: articlesSource
func (_m *ArticlesSourcesRepository) IncreaseFollowByOne(articlesSource entities.ArticlesSource) error {
	ret := _m.Called(articlesSource)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ArticlesSource) error); ok {
		r0 = rf(articlesSource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAll provides a mock function with given fields:
func (_m *ArticlesSourcesRepository) ListAll() ([]entities.ArticlesSource, error) {
	ret := _m.Called()

	var r0 []entities.ArticlesSource
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.ArticlesSource, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.ArticlesSource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ArticlesSource)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllPaging provides a mock function with given fields: page, pageSize
func (_m *ArticlesSourcesRepository) ListAllPaging(page int, pageSize int) ([]entities.ArticlesSource, error) {
	ret := _m.Called(page, pageSize)

	var r0 []entities.ArticlesSource
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.ArticlesSource, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.ArticlesSource); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ArticlesSource)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: keyword, page, pageSize
func (_m *ArticlesSourcesRepository) Search(keyword string, page int, pageSize int) ([]entities.ArticlesSource, int64, error) {
	ret := _m.Called(keyword, page, pageSize)

	var r0 []entities.ArticlesSource
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]entities.ArticlesSource, int64, error)); ok {
		return rf(keyword, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []entities.ArticlesSource); ok {
		r0 = rf(keyword, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ArticlesSource)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(keyword, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(keyword, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchWithFilter provides a mock function with given fields: keyword, page, pageSize, topicID
func (_m *ArticlesSourcesRepository) SearchWithFilter(keyword string, page int, pageSize int, topicID uint) ([]entities.ArticlesSource, int64, error) {
	ret := _m.Called(keyword, page, pageSize, topicID)

	var r0 []entities.ArticlesSource
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int, uint) ([]entities.ArticlesSource, int64, error)); ok {
		return rf(keyword, page, pageSize, topicID)
	}
	if rf, ok := ret.Get(0).(func(string, int, int, uint) []entities.ArticlesSource); ok {
		r0 = rf(keyword, page, pageSize, topicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ArticlesSource)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int, uint) int64); ok {
		r1 = rf(keyword, page, pageSize, topicID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int, uint) error); ok {
		r2 = rf(keyword, page, pageSize, topicID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: articlesSource
func (_m *ArticlesSourcesRepository) Update(articlesSource entities.ArticlesSource) error {
	ret := _m.Called(articlesSource)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ArticlesSource) error); ok {
		r0 = rf(articlesSource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTopicAllSource provides a mock function with given fields: oldTopicId, newTopicId
func (_m *ArticlesSourcesRepository) UpdateTopicAllSource(oldTopicId uint, newTopicId uint) error {
	ret := _m.Called(oldTopicId, newTopicId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(oldTopicId, newTopicId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTopicOneSource provides a mock function with given fields: articlesSource, newTopicId
func (_m *ArticlesSourcesRepository) UpdateTopicOneSource(articlesSource entities.ArticlesSource, newTopicId uint) error {
	ret := _m.Called(articlesSource, newTopicId)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ArticlesSource, uint) error); ok {
		r0 = rf(articlesSource, newTopicId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewArticlesSourcesRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewArticlesSourcesRepository creates a new instance of ArticlesSourcesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArticlesSourcesRepository(t mockConstructorTestingTNewArticlesSourcesRepository) *ArticlesSourcesRepository {
	mock := &ArticlesSourcesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
