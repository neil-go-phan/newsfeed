// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// TopicRepository is an autogenerated mock type for the TopicRepository type
type TopicRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *TopicRepository) Count() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIfNotExist provides a mock function with given fields: topic
func (_m *TopicRepository) CreateIfNotExist(topic entities.Topic) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Topic) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: topic
func (_m *TopicRepository) Delete(topic entities.Topic) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Topic) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByCategory provides a mock function with given fields: categoryID
func (_m *TopicRepository) GetByCategory(categoryID uint) ([]entities.Topic, error) {
	ret := _m.Called(categoryID)

	var r0 []entities.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]entities.Topic, error)); ok {
		return rf(categoryID)
	}
	if rf, ok := ret.Get(0).(func(uint) []entities.Topic); ok {
		r0 = rf(categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPagination provides a mock function with given fields: page, pageSize
func (_m *TopicRepository) GetPagination(page int, pageSize int) ([]entities.Topic, error) {
	ret := _m.Called(page, pageSize)

	var r0 []entities.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.Topic, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.Topic); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *TopicRepository) List() ([]entities.Topic, error) {
	ret := _m.Called()

	var r0 []entities.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Topic, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Topic); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchByName provides a mock function with given fields: keyword
func (_m *TopicRepository) SearchByName(keyword string) ([]entities.Topic, error) {
	ret := _m.Called(keyword)

	var r0 []entities.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entities.Topic, error)); ok {
		return rf(keyword)
	}
	if rf, ok := ret.Get(0).(func(string) []entities.Topic); ok {
		r0 = rf(keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: topic
func (_m *TopicRepository) Update(topic entities.Topic) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Topic) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWhenDeteleCategory provides a mock function with given fields: oldCategoryID, newCategoryID
func (_m *TopicRepository) UpdateWhenDeteleCategory(oldCategoryID uint, newCategoryID uint) error {
	ret := _m.Called(oldCategoryID, newCategoryID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(oldCategoryID, newCategoryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTopicRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTopicRepository creates a new instance of TopicRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTopicRepository(t mockConstructorTestingTNewTopicRepository) *TopicRepository {
	mock := &TopicRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
