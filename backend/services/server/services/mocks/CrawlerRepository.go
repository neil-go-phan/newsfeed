// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// CrawlerRepository is an autogenerated mock type for the CrawlerRepository type
type CrawlerRepository struct {
	mock.Mock
}

// CreateIfNotExist provides a mock function with given fields: crawler
func (_m *CrawlerRepository) CreateIfNotExist(crawler entities.Crawler) (entities.Crawler, error) {
	ret := _m.Called(crawler)

	var r0 entities.Crawler
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Crawler) (entities.Crawler, error)); ok {
		return rf(crawler)
	}
	if rf, ok := ret.Get(0).(func(entities.Crawler) entities.Crawler); ok {
		r0 = rf(crawler)
	} else {
		r0 = ret.Get(0).(entities.Crawler)
	}

	if rf, ok := ret.Get(1).(func(entities.Crawler) error); ok {
		r1 = rf(crawler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *CrawlerRepository) Get(id uint) (*entities.Crawler, error) {
	ret := _m.Called(id)

	var r0 *entities.Crawler
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entities.Crawler, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *entities.Crawler); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Crawler)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *CrawlerRepository) List() ([]entities.Crawler, error) {
	ret := _m.Called()

	var r0 []entities.Crawler
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Crawler, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Crawler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Crawler)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllPaging provides a mock function with given fields: page, pageSize
func (_m *CrawlerRepository) ListAllPaging(page int, pageSize int) ([]entities.Crawler, int64, error) {
	ret := _m.Called(page, pageSize)

	var r0 []entities.Crawler
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.Crawler, int64, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.Crawler); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Crawler)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: crawler
func (_m *CrawlerRepository) Update(crawler entities.Crawler) error {
	ret := _m.Called(crawler)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Crawler) error); ok {
		r0 = rf(crawler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSchedule provides a mock function with given fields: id, newSchedule
func (_m *CrawlerRepository) UpdateSchedule(id uint, newSchedule string) error {
	ret := _m.Called(id, newSchedule)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(id, newSchedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCrawlerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCrawlerRepository creates a new instance of CrawlerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCrawlerRepository(t mockConstructorTestingTNewCrawlerRepository) *CrawlerRepository {
	mock := &CrawlerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
