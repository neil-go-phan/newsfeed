// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// PermissionRepository is an autogenerated mock type for the PermissionRepository type
type PermissionRepository struct {
	mock.Mock
}

// List provides a mock function with given fields:
func (_m *PermissionRepository) List() ([]entities.Permission, error) {
	ret := _m.Called()

	var r0 []entities.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Permission, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Permission); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPermissionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPermissionRepository creates a new instance of PermissionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPermissionRepository(t mockConstructorTestingTNewPermissionRepository) *PermissionRepository {
	mock := &PermissionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
