// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"
	repository "server/repository"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ArticleRepository is an autogenerated mock type for the ArticleRepository type
type ArticleRepository struct {
	mock.Mock
}

// AdminSearchArticles provides a mock function with given fields: keyword, page, pageSize
func (_m *ArticleRepository) AdminSearchArticles(keyword string, page int, pageSize int) ([]entities.Article, int64, error) {
	ret := _m.Called(keyword, page, pageSize)

	var r0 []entities.Article
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]entities.Article, int64, error)); ok {
		return rf(keyword, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []entities.Article); ok {
		r0 = rf(keyword, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(keyword, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(keyword, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AdminSearchArticlesWithFilter provides a mock function with given fields: keyword, page, pageSize, articlesSourceID
func (_m *ArticleRepository) AdminSearchArticlesWithFilter(keyword string, page int, pageSize int, articlesSourceID uint) ([]entities.Article, int64, error) {
	ret := _m.Called(keyword, page, pageSize, articlesSourceID)

	var r0 []entities.Article
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int, uint) ([]entities.Article, int64, error)); ok {
		return rf(keyword, page, pageSize, articlesSourceID)
	}
	if rf, ok := ret.Get(0).(func(string, int, int, uint) []entities.Article); ok {
		r0 = rf(keyword, page, pageSize, articlesSourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int, uint) int64); ok {
		r1 = rf(keyword, page, pageSize, articlesSourceID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int, uint) error); ok {
		r2 = rf(keyword, page, pageSize, articlesSourceID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Count provides a mock function with given fields:
func (_m *ArticleRepository) Count() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountArticleCreateAWeekAgoByArticlesSourceID provides a mock function with given fields: articlesSourceID
func (_m *ArticleRepository) CountArticleCreateAWeekAgoByArticlesSourceID(articlesSourceID uint) (int64, error) {
	ret := _m.Called(articlesSourceID)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (int64, error)); ok {
		return rf(articlesSourceID)
	}
	if rf, ok := ret.Get(0).(func(uint) int64); ok {
		r0 = rf(articlesSourceID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(articlesSourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIfNotExist provides a mock function with given fields: article
func (_m *ArticleRepository) CreateIfNotExist(article *entities.Article) error {
	ret := _m.Called(article)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Article) error); ok {
		r0 = rf(article)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: article
func (_m *ArticleRepository) Delete(article entities.Article) error {
	ret := _m.Called(article)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Article) error); ok {
		r0 = rf(article)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArticlesPaginationByArticlesSourceID provides a mock function with given fields: articlesSourceID, page, pageSize
func (_m *ArticleRepository) GetArticlesPaginationByArticlesSourceID(articlesSourceID uint, page int, pageSize int) ([]entities.Article, int64, error) {
	ret := _m.Called(articlesSourceID, page, pageSize)

	var r0 []entities.Article
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]entities.Article, int64, error)); ok {
		return rf(articlesSourceID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []entities.Article); ok {
		r0 = rf(articlesSourceID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) int64); ok {
		r1 = rf(articlesSourceID, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint, int, int) error); ok {
		r2 = rf(articlesSourceID, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetArticlesPaginationByArticlesSourceIDWithReadStatus provides a mock function with given fields: username, articlesSourceID, page, pageSize
func (_m *ArticleRepository) GetArticlesPaginationByArticlesSourceIDWithReadStatus(username string, articlesSourceID uint, page int, pageSize int) ([]repository.ArticleLeftJoinRead, error) {
	ret := _m.Called(username, articlesSourceID, page, pageSize)

	var r0 []repository.ArticleLeftJoinRead
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint, int, int) ([]repository.ArticleLeftJoinRead, error)); ok {
		return rf(username, articlesSourceID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, uint, int, int) []repository.ArticleLeftJoinRead); ok {
		r0 = rf(username, articlesSourceID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ArticleLeftJoinRead)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint, int, int) error); ok {
		r1 = rf(username, articlesSourceID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticlesPaginationByUserFollowedSource provides a mock function with given fields: username, page, pageSize
func (_m *ArticleRepository) GetArticlesPaginationByUserFollowedSource(username string, page int, pageSize int) ([]repository.ArticleLeftJoinRead, error) {
	ret := _m.Called(username, page, pageSize)

	var r0 []repository.ArticleLeftJoinRead
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]repository.ArticleLeftJoinRead, error)); ok {
		return rf(username, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []repository.ArticleLeftJoinRead); ok {
		r0 = rf(username, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ArticleLeftJoinRead)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(username, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMostRead provides a mock function with given fields: from, to
func (_m *ArticleRepository) GetMostRead(from time.Time, to time.Time) (entities.Article, error) {
	ret := _m.Called(from, to)

	var r0 entities.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) (entities.Article, error)); ok {
		return rf(from, to)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) entities.Article); ok {
		r0 = rf(from, to)
	} else {
		r0 = ret.Get(0).(entities.Article)
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReadLaterListPaginationByArticlesSourceID provides a mock function with given fields: username, articlesSourceID, page, pageSize
func (_m *ArticleRepository) GetReadLaterListPaginationByArticlesSourceID(username string, articlesSourceID uint, page int, pageSize int) ([]repository.ArticleLeftJoinRead, error) {
	ret := _m.Called(username, articlesSourceID, page, pageSize)

	var r0 []repository.ArticleLeftJoinRead
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint, int, int) ([]repository.ArticleLeftJoinRead, error)); ok {
		return rf(username, articlesSourceID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, uint, int, int) []repository.ArticleLeftJoinRead); ok {
		r0 = rf(username, articlesSourceID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ArticleLeftJoinRead)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint, int, int) error); ok {
		r1 = rf(username, articlesSourceID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReadLaterListPaginationByUserFollowedSource provides a mock function with given fields: username, page, pageSize
func (_m *ArticleRepository) GetReadLaterListPaginationByUserFollowedSource(username string, page int, pageSize int) ([]repository.ArticleLeftJoinRead, error) {
	ret := _m.Called(username, page, pageSize)

	var r0 []repository.ArticleLeftJoinRead
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]repository.ArticleLeftJoinRead, error)); ok {
		return rf(username, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []repository.ArticleLeftJoinRead); ok {
		r0 = rf(username, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ArticleLeftJoinRead)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(username, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecentlyReadArticle provides a mock function with given fields: username, page, pageSize
func (_m *ArticleRepository) GetRecentlyReadArticle(username string, page int, pageSize int) ([]repository.ArticleLeftJoinRead, error) {
	ret := _m.Called(username, page, pageSize)

	var r0 []repository.ArticleLeftJoinRead
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]repository.ArticleLeftJoinRead, error)); ok {
		return rf(username, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []repository.ArticleLeftJoinRead); ok {
		r0 = rf(username, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ArticleLeftJoinRead)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(username, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTredingArticle provides a mock function with given fields: username
func (_m *ArticleRepository) GetTredingArticle(username string) ([]repository.TredingArticle, error) {
	ret := _m.Called(username)

	var r0 []repository.TredingArticle
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]repository.TredingArticle, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) []repository.TredingArticle); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.TredingArticle)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnreadArticlesByUserFollowedSource provides a mock function with given fields: username, page, pageSize
func (_m *ArticleRepository) GetUnreadArticlesByUserFollowedSource(username string, page int, pageSize int) ([]repository.ArticleLeftJoinRead, error) {
	ret := _m.Called(username, page, pageSize)

	var r0 []repository.ArticleLeftJoinRead
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]repository.ArticleLeftJoinRead, error)); ok {
		return rf(username, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []repository.ArticleLeftJoinRead); ok {
		r0 = rf(username, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ArticleLeftJoinRead)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(username, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnreadArticlesPaginationByArticlesSourceID provides a mock function with given fields: username, articlesSourceID, page, pageSize
func (_m *ArticleRepository) GetUnreadArticlesPaginationByArticlesSourceID(username string, articlesSourceID uint, page int, pageSize int) ([]repository.ArticleLeftJoinRead, error) {
	ret := _m.Called(username, articlesSourceID, page, pageSize)

	var r0 []repository.ArticleLeftJoinRead
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint, int, int) ([]repository.ArticleLeftJoinRead, error)); ok {
		return rf(username, articlesSourceID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, uint, int, int) []repository.ArticleLeftJoinRead); ok {
		r0 = rf(username, articlesSourceID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ArticleLeftJoinRead)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint, int, int) error); ok {
		r1 = rf(username, articlesSourceID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields: page, pageSize
func (_m *ArticleRepository) ListAll(page int, pageSize int) ([]entities.Article, error) {
	ret := _m.Called(page, pageSize)

	var r0 []entities.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.Article, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.Article); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchArticlesAcrossUserFollowedSources provides a mock function with given fields: username, keyword, page, pageSize
func (_m *ArticleRepository) SearchArticlesAcrossUserFollowedSources(username string, keyword string, page int, pageSize int) ([]entities.Article, int64, error) {
	ret := _m.Called(username, keyword, page, pageSize)

	var r0 []entities.Article
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) ([]entities.Article, int64, error)); ok {
		return rf(username, keyword, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) []entities.Article); ok {
		r0 = rf(username, keyword, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) int64); ok {
		r1 = rf(username, keyword, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, string, int, int) error); ok {
		r2 = rf(username, keyword, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewArticleRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewArticleRepository creates a new instance of ArticleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArticleRepository(t mockConstructorTestingTNewArticleRepository) *ArticleRepository {
	mock := &ArticleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
