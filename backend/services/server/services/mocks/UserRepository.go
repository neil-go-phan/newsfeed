// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// ChangeRole provides a mock function with given fields: id, role
func (_m *UserRepository) ChangeRole(id uint, role string) error {
	ret := _m.Called(id, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(id, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields:
func (_m *UserRepository) Count() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: userInput
func (_m *UserRepository) Create(userInput *entities.User) (*entities.User, error) {
	ret := _m.Called(userInput)

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.User) (*entities.User, error)); ok {
		return rf(userInput)
	}
	if rf, ok := ret.Get(0).(func(*entities.User) *entities.User); ok {
		r0 = rf(userInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.User) error); ok {
		r1 = rf(userInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *UserRepository) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOrCreateWithEmail provides a mock function with given fields: _a0
func (_m *UserRepository) FindOrCreateWithEmail(_a0 *entities.User) (*entities.User, error) {
	ret := _m.Called(_a0)

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.User) (*entities.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entities.User) *entities.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: username
func (_m *UserRepository) Get(username string) (*entities.User, error) {
	ret := _m.Called(username)

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithEmail provides a mock function with given fields: email
func (_m *UserRepository) GetWithEmail(email string) (*entities.User, error) {
	ret := _m.Called(email)

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: page, pageSize
func (_m *UserRepository) List(page int, pageSize int) ([]entities.User, error) {
	ret := _m.Called(page, pageSize)

	var r0 []entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.User, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.User); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUpgrateRole provides a mock function with given fields: username
func (_m *UserRepository) UserUpgrateRole(username string) error {
	ret := _m.Called(username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
