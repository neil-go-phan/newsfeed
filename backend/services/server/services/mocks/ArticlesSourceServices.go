// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"
	services "server/services"

	mock "github.com/stretchr/testify/mock"
)

// ArticlesSourceServices is an autogenerated mock type for the ArticlesSourceServices type
type ArticlesSourceServices struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *ArticlesSourceServices) Count() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIfNotExist provides a mock function with given fields: articlesSource
func (_m *ArticlesSourceServices) CreateIfNotExist(articlesSource entities.ArticlesSource) (entities.ArticlesSource, error) {
	ret := _m.Called(articlesSource)

	var r0 entities.ArticlesSource
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ArticlesSource) (entities.ArticlesSource, error)); ok {
		return rf(articlesSource)
	}
	if rf, ok := ret.Get(0).(func(entities.ArticlesSource) entities.ArticlesSource); ok {
		r0 = rf(articlesSource)
	} else {
		r0 = ret.Get(0).(entities.ArticlesSource)
	}

	if rf, ok := ret.Get(1).(func(entities.ArticlesSource) error); ok {
		r1 = rf(articlesSource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: role, sourceID
func (_m *ArticlesSourceServices) Delete(role string, sourceID uint) error {
	ret := _m.Called(role, sourceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(role, sourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByTopicIDPaginate provides a mock function with given fields: topicID, page, pageSize
func (_m *ArticlesSourceServices) GetByTopicIDPaginate(topicID uint, page int, pageSize int) ([]services.ArticlesSourceResponseRender, int64, error) {
	ret := _m.Called(topicID, page, pageSize)

	var r0 []services.ArticlesSourceResponseRender
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]services.ArticlesSourceResponseRender, int64, error)); ok {
		return rf(topicID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []services.ArticlesSourceResponseRender); ok {
		r0 = rf(topicID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.ArticlesSourceResponseRender)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) int64); ok {
		r1 = rf(topicID, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint, int, int) error); ok {
		r2 = rf(topicID, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMostActiveSources provides a mock function with given fields:
func (_m *ArticlesSourceServices) GetMostActiveSources() ([]services.ArticlesSourceRecommended, error) {
	ret := _m.Called()

	var r0 []services.ArticlesSourceRecommended
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]services.ArticlesSourceRecommended, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []services.ArticlesSourceRecommended); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.ArticlesSourceRecommended)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithID provides a mock function with given fields: id
func (_m *ArticlesSourceServices) GetWithID(id uint) (services.ArticlesSourceResponseRender, error) {
	ret := _m.Called(id)

	var r0 services.ArticlesSourceResponseRender
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (services.ArticlesSourceResponseRender, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) services.ArticlesSourceResponseRender); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(services.ArticlesSourceResponseRender)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields:
func (_m *ArticlesSourceServices) ListAll() ([]services.ArticlesSourceResponseRender, error) {
	ret := _m.Called()

	var r0 []services.ArticlesSourceResponseRender
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]services.ArticlesSourceResponseRender, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []services.ArticlesSourceResponseRender); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.ArticlesSourceResponseRender)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllPaging provides a mock function with given fields: page, pageSize
func (_m *ArticlesSourceServices) ListAllPaging(page int, pageSize int) ([]services.ArticlesSourceResponseRender, error) {
	ret := _m.Called(page, pageSize)

	var r0 []services.ArticlesSourceResponseRender
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]services.ArticlesSourceResponseRender, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []services.ArticlesSourceResponseRender); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.ArticlesSourceResponseRender)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: keyword, page, pageSize
func (_m *ArticlesSourceServices) Search(keyword string, page int, pageSize int) ([]services.ArticlesSourceResponseRender, int64, error) {
	ret := _m.Called(keyword, page, pageSize)

	var r0 []services.ArticlesSourceResponseRender
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]services.ArticlesSourceResponseRender, int64, error)); ok {
		return rf(keyword, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []services.ArticlesSourceResponseRender); ok {
		r0 = rf(keyword, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.ArticlesSourceResponseRender)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(keyword, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(keyword, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchWithFilter provides a mock function with given fields: keyword, page, pageSize, topicID
func (_m *ArticlesSourceServices) SearchWithFilter(keyword string, page int, pageSize int, topicID uint) ([]services.ArticlesSourceResponseRender, int64, error) {
	ret := _m.Called(keyword, page, pageSize, topicID)

	var r0 []services.ArticlesSourceResponseRender
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int, uint) ([]services.ArticlesSourceResponseRender, int64, error)); ok {
		return rf(keyword, page, pageSize, topicID)
	}
	if rf, ok := ret.Get(0).(func(string, int, int, uint) []services.ArticlesSourceResponseRender); ok {
		r0 = rf(keyword, page, pageSize, topicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.ArticlesSourceResponseRender)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int, uint) int64); ok {
		r1 = rf(keyword, page, pageSize, topicID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int, uint) error); ok {
		r2 = rf(keyword, page, pageSize, topicID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: role, articlesSource
func (_m *ArticlesSourceServices) Update(role string, articlesSource entities.ArticlesSource) error {
	ret := _m.Called(role, articlesSource)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entities.ArticlesSource) error); ok {
		r0 = rf(role, articlesSource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTopicAllSource provides a mock function with given fields: oldTopicId, newTopicId
func (_m *ArticlesSourceServices) UpdateTopicAllSource(oldTopicId uint, newTopicId uint) error {
	ret := _m.Called(oldTopicId, newTopicId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(oldTopicId, newTopicId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTopicOneSource provides a mock function with given fields: articlesSource, newTopicId
func (_m *ArticlesSourceServices) UpdateTopicOneSource(articlesSource entities.ArticlesSource, newTopicId uint) error {
	ret := _m.Called(articlesSource, newTopicId)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ArticlesSource, uint) error); ok {
		r0 = rf(articlesSource, newTopicId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserFollow provides a mock function with given fields: articlesSourceID
func (_m *ArticlesSourceServices) UserFollow(articlesSourceID uint) error {
	ret := _m.Called(articlesSourceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(articlesSourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUnfollow provides a mock function with given fields: articlesSourceID
func (_m *ArticlesSourceServices) UserUnfollow(articlesSourceID uint) error {
	ret := _m.Called(articlesSourceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(articlesSourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewArticlesSourceServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewArticlesSourceServices creates a new instance of ArticlesSourceServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArticlesSourceServices(t mockConstructorTestingTNewArticlesSourceServices) *ArticlesSourceServices {
	mock := &ArticlesSourceServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
