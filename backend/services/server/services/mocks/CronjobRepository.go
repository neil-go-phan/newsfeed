// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CronjobRepository is an autogenerated mock type for the CronjobRepository type
type CronjobRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: cronjob
func (_m *CronjobRepository) Create(cronjob *entities.Cronjob) (*entities.Cronjob, error) {
	ret := _m.Called(cronjob)

	var r0 *entities.Cronjob
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Cronjob) (*entities.Cronjob, error)); ok {
		return rf(cronjob)
	}
	if rf, ok := ret.Get(0).(func(*entities.Cronjob) *entities.Cronjob); ok {
		r0 = rf(cronjob)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Cronjob)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Cronjob) error); ok {
		r1 = rf(cronjob)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: lastTrack, now
func (_m *CronjobRepository) Get(lastTrack time.Time, now time.Time) (*[]entities.Cronjob, error) {
	ret := _m.Called(lastTrack, now)

	var r0 *[]entities.Cronjob
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) (*[]entities.Cronjob, error)); ok {
		return rf(lastTrack, now)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) *[]entities.Cronjob); ok {
		r0 = rf(lastTrack, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Cronjob)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(lastTrack, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuning provides a mock function with given fields:
func (_m *CronjobRepository) GetRuning() (*[]entities.Cronjob, error) {
	ret := _m.Called()

	var r0 *[]entities.Cronjob
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]entities.Cronjob, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]entities.Cronjob); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Cronjob)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResult provides a mock function with given fields: cronjob
func (_m *CronjobRepository) UpdateResult(cronjob *entities.Cronjob) error {
	ret := _m.Called(cronjob)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Cronjob) error); ok {
		r0 = rf(cronjob)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCronjobRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCronjobRepository creates a new instance of CronjobRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCronjobRepository(t mockConstructorTestingTNewCronjobRepository) *CronjobRepository {
	mock := &CronjobRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
