// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"
	services "server/services"

	mock "github.com/stretchr/testify/mock"
)

// TopicServices is an autogenerated mock type for the TopicServices type
type TopicServices struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *TopicServices) Count() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIfNotExist provides a mock function with given fields: role, topic
func (_m *TopicServices) CreateIfNotExist(role string, topic entities.Topic) error {
	ret := _m.Called(role, topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entities.Topic) error); ok {
		r0 = rf(role, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: role, topic
func (_m *TopicServices) Delete(role string, topic entities.Topic) error {
	ret := _m.Called(role, topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entities.Topic) error); ok {
		r0 = rf(role, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByCategory provides a mock function with given fields: categoryID
func (_m *TopicServices) GetByCategory(categoryID uint) ([]services.TopicResponse, error) {
	ret := _m.Called(categoryID)

	var r0 []services.TopicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]services.TopicResponse, error)); ok {
		return rf(categoryID)
	}
	if rf, ok := ret.Get(0).(func(uint) []services.TopicResponse); ok {
		r0 = rf(categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.TopicResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPagination provides a mock function with given fields: page, pageSize
func (_m *TopicServices) GetPagination(page int, pageSize int) ([]services.TopicResponse, error) {
	ret := _m.Called(page, pageSize)

	var r0 []services.TopicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]services.TopicResponse, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []services.TopicResponse); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.TopicResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *TopicServices) List() ([]services.TopicResponse, error) {
	ret := _m.Called()

	var r0 []services.TopicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]services.TopicResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []services.TopicResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.TopicResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchByName provides a mock function with given fields: keyword
func (_m *TopicServices) SearchByName(keyword string) ([]services.TopicResponse, error) {
	ret := _m.Called(keyword)

	var r0 []services.TopicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]services.TopicResponse, error)); ok {
		return rf(keyword)
	}
	if rf, ok := ret.Get(0).(func(string) []services.TopicResponse); ok {
		r0 = rf(keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.TopicResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchTopicAndArticlesSourcePaginate provides a mock function with given fields: keyword, page, pageSize
func (_m *TopicServices) SearchTopicAndArticlesSourcePaginate(keyword string, page int, pageSize int) ([]services.TopicResponse, []services.ArticlesSourceResponseRender, int64, error) {
	ret := _m.Called(keyword, page, pageSize)

	var r0 []services.TopicResponse
	var r1 []services.ArticlesSourceResponseRender
	var r2 int64
	var r3 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]services.TopicResponse, []services.ArticlesSourceResponseRender, int64, error)); ok {
		return rf(keyword, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []services.TopicResponse); ok {
		r0 = rf(keyword, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.TopicResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) []services.ArticlesSourceResponseRender); ok {
		r1 = rf(keyword, page, pageSize)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]services.ArticlesSourceResponseRender)
		}
	}

	if rf, ok := ret.Get(2).(func(string, int, int) int64); ok {
		r2 = rf(keyword, page, pageSize)
	} else {
		r2 = ret.Get(2).(int64)
	}

	if rf, ok := ret.Get(3).(func(string, int, int) error); ok {
		r3 = rf(keyword, page, pageSize)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Update provides a mock function with given fields: role, topic
func (_m *TopicServices) Update(role string, topic entities.Topic) error {
	ret := _m.Called(role, topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entities.Topic) error); ok {
		r0 = rf(role, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWhenDeteleCategory provides a mock function with given fields: oldCategoryID, newCategoryID
func (_m *TopicServices) UpdateWhenDeteleCategory(oldCategoryID uint, newCategoryID uint) error {
	ret := _m.Called(oldCategoryID, newCategoryID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(oldCategoryID, newCategoryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTopicServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewTopicServices creates a new instance of TopicServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTopicServices(t mockConstructorTestingTNewTopicServices) *TopicServices {
	mock := &TopicServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
