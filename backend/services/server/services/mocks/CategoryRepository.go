// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// CategoryRepository is an autogenerated mock type for the CategoryRepository type
type CategoryRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *CategoryRepository) Count() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIfNotExist provides a mock function with given fields: category
func (_m *CategoryRepository) CreateIfNotExist(category entities.Category) error {
	ret := _m.Called(category)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Category) error); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: category
func (_m *CategoryRepository) Delete(category entities.Category) error {
	ret := _m.Called(category)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Category) error); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: name
func (_m *CategoryRepository) Get(name string) (entities.Category, error) {
	ret := _m.Called(name)

	var r0 entities.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entities.Category, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) entities.Category); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(entities.Category)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPagination provides a mock function with given fields: page, pageSize
func (_m *CategoryRepository) GetPagination(page int, pageSize int) ([]entities.Category, error) {
	ret := _m.Called(page, pageSize)

	var r0 []entities.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entities.Category, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entities.Category); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields:
func (_m *CategoryRepository) ListAll() ([]entities.Category, error) {
	ret := _m.Called()

	var r0 []entities.Category
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Category, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Category)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListName provides a mock function with given fields:
func (_m *CategoryRepository) ListName() ([]entities.Category, error) {
	ret := _m.Called()

	var r0 []entities.Category
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Category, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Category)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: category
func (_m *CategoryRepository) Update(category entities.Category) error {
	ret := _m.Called(category)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Category) error); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCategoryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCategoryRepository creates a new instance of CategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCategoryRepository(t mockConstructorTestingTNewCategoryRepository) *CategoryRepository {
	mock := &CategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
